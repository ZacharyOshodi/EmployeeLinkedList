#include <iostream>
#include <omp.h>
#include <stdio.h>
#include <stdlib.h>

using namespace std;

int SumSquareFunc(int n)
{
    int SumSquare = 0;
    while (n)
    {
        SumSquare += (n % 10) * (n % 10);
        n /= 10;
    }
    return SumSquare;
}

bool HappyNumFunc(int n)
{
    int first, second;

    first = second = n;
    do
    {
        first = SumSquareFunc(first);
        second = SumSquareFunc(SumSquareFunc(second));

    }
    while (first != second);

    return (first == 1);
}

int main ()

{
    
    
     int cnt = 0;
    
    #pragma omp parallel for reduction(+:cnt) 
    for (int i=2; i<1000000; i++)
    {
        bool prime=true;
        for (int j=2; j*j<=i; j++)
        
        {
            if (i % j == 0)
            {
                prime=false;
                break;
            }
        }

        if(HappyNumFunc(i) && (prime))cnt++;
    }


    printf("There are %d happy prime numbers between 1 and 1 million", cnt);




    return 0;
}
